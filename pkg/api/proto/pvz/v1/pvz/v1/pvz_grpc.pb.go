// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: pvz/v1/pvz.proto

package pvz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PVZ_AddOrder_FullMethodName    = "/pvz.PVZ/AddOrder"
	PVZ_DeleteOrder_FullMethodName = "/pvz.PVZ/DeleteOrder"
	PVZ_ListOrder_FullMethodName   = "/pvz.PVZ/ListOrder"
	PVZ_ListRefund_FullMethodName  = "/pvz.PVZ/ListRefund"
	PVZ_FindOrder_FullMethodName   = "/pvz.PVZ/FindOrder"
)

// PVZClient is the client API for PVZ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PVZClient interface {
	AddOrder(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*DeleteOrderResponse, error)
	ListOrder(ctx context.Context, in *ListOrderRequest, opts ...grpc.CallOption) (*ListOrderResponse, error)
	ListRefund(ctx context.Context, in *ListRefundRequest, opts ...grpc.CallOption) (*ListRefundResponse, error)
	FindOrder(ctx context.Context, in *FindOrderRequest, opts ...grpc.CallOption) (*FindOrderResponse, error)
}

type pVZClient struct {
	cc grpc.ClientConnInterface
}

func NewPVZClient(cc grpc.ClientConnInterface) PVZClient {
	return &pVZClient{cc}
}

func (c *pVZClient) AddOrder(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PVZ_AddOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZClient) DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*DeleteOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrderResponse)
	err := c.cc.Invoke(ctx, PVZ_DeleteOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZClient) ListOrder(ctx context.Context, in *ListOrderRequest, opts ...grpc.CallOption) (*ListOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrderResponse)
	err := c.cc.Invoke(ctx, PVZ_ListOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZClient) ListRefund(ctx context.Context, in *ListRefundRequest, opts ...grpc.CallOption) (*ListRefundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRefundResponse)
	err := c.cc.Invoke(ctx, PVZ_ListRefund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pVZClient) FindOrder(ctx context.Context, in *FindOrderRequest, opts ...grpc.CallOption) (*FindOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindOrderResponse)
	err := c.cc.Invoke(ctx, PVZ_FindOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PVZServer is the server API for PVZ service.
// All implementations must embed UnimplementedPVZServer
// for forward compatibility
type PVZServer interface {
	AddOrder(context.Context, *AddOrderRequest) (*emptypb.Empty, error)
	DeleteOrder(context.Context, *DeleteOrderRequest) (*DeleteOrderResponse, error)
	ListOrder(context.Context, *ListOrderRequest) (*ListOrderResponse, error)
	ListRefund(context.Context, *ListRefundRequest) (*ListRefundResponse, error)
	FindOrder(context.Context, *FindOrderRequest) (*FindOrderResponse, error)
	mustEmbedUnimplementedPVZServer()
}

// UnimplementedPVZServer must be embedded to have forward compatible implementations.
type UnimplementedPVZServer struct {
}

func (UnimplementedPVZServer) AddOrder(context.Context, *AddOrderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}
func (UnimplementedPVZServer) DeleteOrder(context.Context, *DeleteOrderRequest) (*DeleteOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedPVZServer) ListOrder(context.Context, *ListOrderRequest) (*ListOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrder not implemented")
}
func (UnimplementedPVZServer) ListRefund(context.Context, *ListRefundRequest) (*ListRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRefund not implemented")
}
func (UnimplementedPVZServer) FindOrder(context.Context, *FindOrderRequest) (*FindOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOrder not implemented")
}
func (UnimplementedPVZServer) mustEmbedUnimplementedPVZServer() {}

// UnsafePVZServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PVZServer will
// result in compilation errors.
type UnsafePVZServer interface {
	mustEmbedUnimplementedPVZServer()
}

func RegisterPVZServer(s grpc.ServiceRegistrar, srv PVZServer) {
	s.RegisterService(&PVZ_ServiceDesc, srv)
}

func _PVZ_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_AddOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).AddOrder(ctx, req.(*AddOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZ_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_DeleteOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).DeleteOrder(ctx, req.(*DeleteOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZ_ListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).ListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_ListOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).ListOrder(ctx, req.(*ListOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZ_ListRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).ListRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_ListRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).ListRefund(ctx, req.(*ListRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PVZ_FindOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PVZServer).FindOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PVZ_FindOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PVZServer).FindOrder(ctx, req.(*FindOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PVZ_ServiceDesc is the grpc.ServiceDesc for PVZ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PVZ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pvz.PVZ",
	HandlerType: (*PVZServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrder",
			Handler:    _PVZ_AddOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _PVZ_DeleteOrder_Handler,
		},
		{
			MethodName: "ListOrder",
			Handler:    _PVZ_ListOrder_Handler,
		},
		{
			MethodName: "ListRefund",
			Handler:    _PVZ_ListRefund_Handler,
		},
		{
			MethodName: "FindOrder",
			Handler:    _PVZ_FindOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pvz/v1/pvz.proto",
}
