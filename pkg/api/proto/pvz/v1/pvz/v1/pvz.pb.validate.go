// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pvz/v1/pvz.proto

package pvz

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OrderInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderInfoMultiError, or nil
// if none found.
func (m *OrderInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Order

	if len(errors) > 0 {
		return OrderInfoMultiError(errors)
	}

	return nil
}

// OrderInfoMultiError is an error wrapping multiple validation errors returned
// by OrderInfo.ValidateAll() if the designated constraints aren't met.
type OrderInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderInfoMultiError) AllErrors() []error { return m }

// OrderInfoValidationError is the validation error returned by
// OrderInfo.Validate if the designated constraints aren't met.
type OrderInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderInfoValidationError) ErrorName() string { return "OrderInfoValidationError" }

// Error satisfies the builtin error interface
func (e OrderInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderInfoValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 15 {
		err := OrderValidationError{
			field:  "Id",
			reason: "value must be greater than 15",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IdReceiver

	if all {
		switch v := interface{}(m.GetStorageTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "StorageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "StorageTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStorageTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "StorageTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Weight

	// no validation rules for Packaging

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on AddOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrderRequestMultiError, or nil if none found.
func (m *AddOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrder() == nil {
		err := AddOrderRequestValidationError{
			field:  "Order",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddOrderRequestValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddOrderRequestValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOrderRequestValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddOrderRequestMultiError(errors)
	}

	return nil
}

// AddOrderRequestMultiError is an error wrapping multiple validation errors
// returned by AddOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type AddOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrderRequestMultiError) AllErrors() []error { return m }

// AddOrderRequestValidationError is the validation error returned by
// AddOrderRequest.Validate if the designated constraints aren't met.
type AddOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrderRequestValidationError) ErrorName() string { return "AddOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrderRequestValidationError{}

// Validate checks the field values on ID with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *ID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IDMultiError, or nil if none found.
func (m *ID) ValidateAll() error {
	return m.validate(true)
}

func (m *ID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return IDMultiError(errors)
	}

	return nil
}

// IDMultiError is an error wrapping multiple validation errors returned by
// ID.ValidateAll() if the designated constraints aren't met.
type IDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDMultiError) AllErrors() []error { return m }

// IDValidationError is the validation error returned by ID.Validate if the
// designated constraints aren't met.
type IDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDValidationError) ErrorName() string { return "IDValidationError" }

// Error satisfies the builtin error interface
func (e IDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDValidationError{}

// Validate checks the field values on IDReceiver with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDReceiver) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDReceiver with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IDReceiverMultiError, or
// nil if none found.
func (m *IDReceiver) ValidateAll() error {
	return m.validate(true)
}

func (m *IDReceiver) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdReceiver

	if len(errors) > 0 {
		return IDReceiverMultiError(errors)
	}

	return nil
}

// IDReceiverMultiError is an error wrapping multiple validation errors
// returned by IDReceiver.ValidateAll() if the designated constraints aren't met.
type IDReceiverMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDReceiverMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDReceiverMultiError) AllErrors() []error { return m }

// IDReceiverValidationError is the validation error returned by
// IDReceiver.Validate if the designated constraints aren't met.
type IDReceiverValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDReceiverValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDReceiverValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDReceiverValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDReceiverValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDReceiverValidationError) ErrorName() string { return "IDReceiverValidationError" }

// Error satisfies the builtin error interface
func (e IDReceiverValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDReceiver.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDReceiverValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDReceiverValidationError{}

// Validate checks the field values on Pagination with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pagination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pagination with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaginationMultiError, or
// nil if none found.
func (m *Pagination) ValidateAll() error {
	return m.validate(true)
}

func (m *Pagination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return PaginationMultiError(errors)
	}

	return nil
}

// PaginationMultiError is an error wrapping multiple validation errors
// returned by Pagination.ValidateAll() if the designated constraints aren't met.
type PaginationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationMultiError) AllErrors() []error { return m }

// PaginationValidationError is the validation error returned by
// Pagination.Validate if the designated constraints aren't met.
type PaginationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationValidationError) ErrorName() string { return "PaginationValidationError" }

// Error satisfies the builtin error interface
func (e PaginationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationValidationError{}

// Validate checks the field values on Help with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Help) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Help with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HelpMultiError, or nil if none found.
func (m *Help) ValidateAll() error {
	return m.validate(true)
}

func (m *Help) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	if len(errors) > 0 {
		return HelpMultiError(errors)
	}

	return nil
}

// HelpMultiError is an error wrapping multiple validation errors returned by
// Help.ValidateAll() if the designated constraints aren't met.
type HelpMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelpMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelpMultiError) AllErrors() []error { return m }

// HelpValidationError is the validation error returned by Help.Validate if the
// designated constraints aren't met.
type HelpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelpValidationError) ErrorName() string { return "HelpValidationError" }

// Error satisfies the builtin error interface
func (e HelpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelpValidationError{}

// Validate checks the field values on DeleteOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrderRequestMultiError, or nil if none found.
func (m *DeleteOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetID()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteOrderRequestValidationError{
					field:  "ID",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteOrderRequestValidationError{
					field:  "ID",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetID()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteOrderRequestValidationError{
				field:  "ID",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteOrderRequestMultiError(errors)
	}

	return nil
}

// DeleteOrderRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrderRequestMultiError) AllErrors() []error { return m }

// DeleteOrderRequestValidationError is the validation error returned by
// DeleteOrderRequest.Validate if the designated constraints aren't met.
type DeleteOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrderRequestValidationError) ErrorName() string {
	return "DeleteOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrderRequestValidationError{}

// Validate checks the field values on DeleteOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrderResponseMultiError, or nil if none found.
func (m *DeleteOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrderResponseMultiError(errors)
	}

	return nil
}

// DeleteOrderResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrderResponseMultiError) AllErrors() []error { return m }

// DeleteOrderResponseValidationError is the validation error returned by
// DeleteOrderResponse.Validate if the designated constraints aren't met.
type DeleteOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrderResponseValidationError) ErrorName() string {
	return "DeleteOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrderResponseValidationError{}

// Validate checks the field values on ListOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrderRequestMultiError, or nil if none found.
func (m *ListOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListOrderRequestMultiError(errors)
	}

	return nil
}

// ListOrderRequestMultiError is an error wrapping multiple validation errors
// returned by ListOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type ListOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrderRequestMultiError) AllErrors() []error { return m }

// ListOrderRequestValidationError is the validation error returned by
// ListOrderRequest.Validate if the designated constraints aren't met.
type ListOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrderRequestValidationError) ErrorName() string { return "ListOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrderRequestValidationError{}

// Validate checks the field values on ListOrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrderResponseMultiError, or nil if none found.
func (m *ListOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrderResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrderResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrderResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrderResponseMultiError(errors)
	}

	return nil
}

// ListOrderResponseMultiError is an error wrapping multiple validation errors
// returned by ListOrderResponse.ValidateAll() if the designated constraints
// aren't met.
type ListOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrderResponseMultiError) AllErrors() []error { return m }

// ListOrderResponseValidationError is the validation error returned by
// ListOrderResponse.Validate if the designated constraints aren't met.
type ListOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrderResponseValidationError) ErrorName() string {
	return "ListOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrderResponseValidationError{}

// Validate checks the field values on ListRefundRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRefundRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRefundRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRefundRequestMultiError, or nil if none found.
func (m *ListRefundRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRefundRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRefundRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRefundRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRefundRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRefundRequestMultiError(errors)
	}

	return nil
}

// ListRefundRequestMultiError is an error wrapping multiple validation errors
// returned by ListRefundRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRefundRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRefundRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRefundRequestMultiError) AllErrors() []error { return m }

// ListRefundRequestValidationError is the validation error returned by
// ListRefundRequest.Validate if the designated constraints aren't met.
type ListRefundRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRefundRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRefundRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRefundRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRefundRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRefundRequestValidationError) ErrorName() string {
	return "ListRefundRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRefundRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRefundRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRefundRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRefundRequestValidationError{}

// Validate checks the field values on ListRefundResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRefundResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRefundResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRefundResponseMultiError, or nil if none found.
func (m *ListRefundResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRefundResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRefundResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRefundResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRefundResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRefundResponseMultiError(errors)
	}

	return nil
}

// ListRefundResponseMultiError is an error wrapping multiple validation errors
// returned by ListRefundResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRefundResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRefundResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRefundResponseMultiError) AllErrors() []error { return m }

// ListRefundResponseValidationError is the validation error returned by
// ListRefundResponse.Validate if the designated constraints aren't met.
type ListRefundResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRefundResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRefundResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRefundResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRefundResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRefundResponseValidationError) ErrorName() string {
	return "ListRefundResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRefundResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRefundResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRefundResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRefundResponseValidationError{}

// Validate checks the field values on FindOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindOrderRequestMultiError, or nil if none found.
func (m *FindOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindOrderRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindOrderRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindOrderRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindOrderRequestMultiError(errors)
	}

	return nil
}

// FindOrderRequestMultiError is an error wrapping multiple validation errors
// returned by FindOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type FindOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindOrderRequestMultiError) AllErrors() []error { return m }

// FindOrderRequestValidationError is the validation error returned by
// FindOrderRequest.Validate if the designated constraints aren't met.
type FindOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindOrderRequestValidationError) ErrorName() string { return "FindOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e FindOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindOrderRequestValidationError{}

// Validate checks the field values on FindOrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindOrderResponseMultiError, or nil if none found.
func (m *FindOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindOrderResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindOrderResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindOrderResponseValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindOrderResponseMultiError(errors)
	}

	return nil
}

// FindOrderResponseMultiError is an error wrapping multiple validation errors
// returned by FindOrderResponse.ValidateAll() if the designated constraints
// aren't met.
type FindOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindOrderResponseMultiError) AllErrors() []error { return m }

// FindOrderResponseValidationError is the validation error returned by
// FindOrderResponse.Validate if the designated constraints aren't met.
type FindOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindOrderResponseValidationError) ErrorName() string {
	return "FindOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindOrderResponseValidationError{}

// Validate checks the field values on DeliverOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeliverOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeliverOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeliverOrderRequestMultiError, or nil if none found.
func (m *DeliverOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeliverOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeliverOrderRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeliverOrderRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeliverOrderRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdReceiver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeliverOrderRequestValidationError{
					field:  "IdReceiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeliverOrderRequestValidationError{
					field:  "IdReceiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdReceiver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeliverOrderRequestValidationError{
				field:  "IdReceiver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeliverOrderRequestMultiError(errors)
	}

	return nil
}

// DeliverOrderRequestMultiError is an error wrapping multiple validation
// errors returned by DeliverOrderRequest.ValidateAll() if the designated
// constraints aren't met.
type DeliverOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeliverOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeliverOrderRequestMultiError) AllErrors() []error { return m }

// DeliverOrderRequestValidationError is the validation error returned by
// DeliverOrderRequest.Validate if the designated constraints aren't met.
type DeliverOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeliverOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeliverOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeliverOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeliverOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeliverOrderRequestValidationError) ErrorName() string {
	return "DeliverOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeliverOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeliverOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeliverOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeliverOrderRequestValidationError{}

// Validate checks the field values on DeliverOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeliverOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeliverOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeliverOrderResponseMultiError, or nil if none found.
func (m *DeliverOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeliverOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeliverOrderResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeliverOrderResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeliverOrderResponseValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeliverOrderResponseMultiError(errors)
	}

	return nil
}

// DeliverOrderResponseMultiError is an error wrapping multiple validation
// errors returned by DeliverOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type DeliverOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeliverOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeliverOrderResponseMultiError) AllErrors() []error { return m }

// DeliverOrderResponseValidationError is the validation error returned by
// DeliverOrderResponse.Validate if the designated constraints aren't met.
type DeliverOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeliverOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeliverOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeliverOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeliverOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeliverOrderResponseValidationError) ErrorName() string {
	return "DeliverOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeliverOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeliverOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeliverOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeliverOrderResponseValidationError{}

// Validate checks the field values on GetOrderByCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderByCustomerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderByCustomerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderByCustomerRequestMultiError, or nil if none found.
func (m *GetOrderByCustomerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderByCustomerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderByCustomerRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderByCustomerRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderByCustomerRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdReceiver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderByCustomerRequestValidationError{
					field:  "IdReceiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderByCustomerRequestValidationError{
					field:  "IdReceiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdReceiver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderByCustomerRequestValidationError{
				field:  "IdReceiver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderByCustomerRequestMultiError(errors)
	}

	return nil
}

// GetOrderByCustomerRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrderByCustomerRequest.ValidateAll() if the
// designated constraints aren't met.
type GetOrderByCustomerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderByCustomerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderByCustomerRequestMultiError) AllErrors() []error { return m }

// GetOrderByCustomerRequestValidationError is the validation error returned by
// GetOrderByCustomerRequest.Validate if the designated constraints aren't met.
type GetOrderByCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderByCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderByCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderByCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderByCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderByCustomerRequestValidationError) ErrorName() string {
	return "GetOrderByCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderByCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderByCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderByCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderByCustomerRequestValidationError{}

// Validate checks the field values on GetOrderByCustomerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderByCustomerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderByCustomerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderByCustomerResponseMultiError, or nil if none found.
func (m *GetOrderByCustomerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderByCustomerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderByCustomerResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderByCustomerResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderByCustomerResponseValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderByCustomerResponseMultiError(errors)
	}

	return nil
}

// GetOrderByCustomerResponseMultiError is an error wrapping multiple
// validation errors returned by GetOrderByCustomerResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOrderByCustomerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderByCustomerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderByCustomerResponseMultiError) AllErrors() []error { return m }

// GetOrderByCustomerResponseValidationError is the validation error returned
// by GetOrderByCustomerResponse.Validate if the designated constraints aren't met.
type GetOrderByCustomerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderByCustomerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderByCustomerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderByCustomerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderByCustomerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderByCustomerResponseValidationError) ErrorName() string {
	return "GetOrderByCustomerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderByCustomerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderByCustomerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderByCustomerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderByCustomerResponseValidationError{}

// Validate checks the field values on HelpRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelpRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelpRequestMultiError, or
// nil if none found.
func (m *HelpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HelpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HelpRequestMultiError(errors)
	}

	return nil
}

// HelpRequestMultiError is an error wrapping multiple validation errors
// returned by HelpRequest.ValidateAll() if the designated constraints aren't met.
type HelpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelpRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelpRequestMultiError) AllErrors() []error { return m }

// HelpRequestValidationError is the validation error returned by
// HelpRequest.Validate if the designated constraints aren't met.
type HelpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelpRequestValidationError) ErrorName() string { return "HelpRequestValidationError" }

// Error satisfies the builtin error interface
func (e HelpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelpRequestValidationError{}

// Validate checks the field values on HelpResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelpResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelpResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelpResponseMultiError, or
// nil if none found.
func (m *HelpResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HelpResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHelp() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HelpResponseValidationError{
						field:  fmt.Sprintf("Help[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HelpResponseValidationError{
						field:  fmt.Sprintf("Help[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HelpResponseValidationError{
					field:  fmt.Sprintf("Help[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HelpResponseMultiError(errors)
	}

	return nil
}

// HelpResponseMultiError is an error wrapping multiple validation errors
// returned by HelpResponse.ValidateAll() if the designated constraints aren't met.
type HelpResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelpResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelpResponseMultiError) AllErrors() []error { return m }

// HelpResponseValidationError is the validation error returned by
// HelpResponse.Validate if the designated constraints aren't met.
type HelpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelpResponseValidationError) ErrorName() string { return "HelpResponseValidationError" }

// Error satisfies the builtin error interface
func (e HelpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelpResponseValidationError{}

// Validate checks the field values on RefundOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefundOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundOrderRequestMultiError, or nil if none found.
func (m *RefundOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetID()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefundOrderRequestValidationError{
					field:  "ID",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefundOrderRequestValidationError{
					field:  "ID",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetID()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefundOrderRequestValidationError{
				field:  "ID",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIDReceiver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefundOrderRequestValidationError{
					field:  "IDReceiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefundOrderRequestValidationError{
					field:  "IDReceiver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIDReceiver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefundOrderRequestValidationError{
				field:  "IDReceiver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RefundOrderRequestMultiError(errors)
	}

	return nil
}

// RefundOrderRequestMultiError is an error wrapping multiple validation errors
// returned by RefundOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type RefundOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundOrderRequestMultiError) AllErrors() []error { return m }

// RefundOrderRequestValidationError is the validation error returned by
// RefundOrderRequest.Validate if the designated constraints aren't met.
type RefundOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundOrderRequestValidationError) ErrorName() string {
	return "RefundOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefundOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundOrderRequestValidationError{}

// Validate checks the field values on RefundOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefundOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundOrderResponseMultiError, or nil if none found.
func (m *RefundOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RefundOrderResponseMultiError(errors)
	}

	return nil
}

// RefundOrderResponseMultiError is an error wrapping multiple validation
// errors returned by RefundOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type RefundOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundOrderResponseMultiError) AllErrors() []error { return m }

// RefundOrderResponseValidationError is the validation error returned by
// RefundOrderResponse.Validate if the designated constraints aren't met.
type RefundOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundOrderResponseValidationError) ErrorName() string {
	return "RefundOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefundOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundOrderResponseValidationError{}
