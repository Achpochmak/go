// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/module/init_module.go

// Package mock_module is a generated GoMock package.
package mock_module

import (
	models "HOMEWORK-1/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockRepository) AddOrder(arg0 context.Context, arg1 models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockRepositoryMockRecorder) AddOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockRepository)(nil).AddOrder), arg0, arg1)
}

// DeleteOrder mocks base method.
func (m *MockRepository) DeleteOrder(arg0 context.Context, arg1 models.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockRepositoryMockRecorder) DeleteOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockRepository)(nil).DeleteOrder), arg0, arg1)
}

// GetOrderByID mocks base method.
func (m *MockRepository) GetOrderByID(arg0 context.Context, arg1 models.ID) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", arg0, arg1)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockRepositoryMockRecorder) GetOrderByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockRepository)(nil).GetOrderByID), arg0, arg1)
}

// GetOrdersByCustomer mocks base method.
func (m *MockRepository) GetOrdersByCustomer(arg0 context.Context, arg1 models.ID, arg2 int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByCustomer", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByCustomer indicates an expected call of GetOrdersByCustomer.
func (mr *MockRepositoryMockRecorder) GetOrdersByCustomer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByCustomer", reflect.TypeOf((*MockRepository)(nil).GetOrdersByCustomer), arg0, arg1, arg2)
}

// ListOrder mocks base method.
func (m *MockRepository) ListOrder(arg0 context.Context) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrder", arg0)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrder indicates an expected call of ListOrder.
func (mr *MockRepositoryMockRecorder) ListOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrder", reflect.TypeOf((*MockRepository)(nil).ListOrder), arg0)
}

// ListRefund mocks base method.
func (m *MockRepository) ListRefund(arg0 context.Context, arg1, arg2 int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRefund", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRefund indicates an expected call of ListRefund.
func (mr *MockRepositoryMockRecorder) ListRefund(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRefund", reflect.TypeOf((*MockRepository)(nil).ListRefund), arg0, arg1, arg2)
}

// TruncateTable mocks base method.
func (m *MockRepository) TruncateTable(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TruncateTable", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TruncateTable indicates an expected call of TruncateTable.
func (mr *MockRepositoryMockRecorder) TruncateTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TruncateTable", reflect.TypeOf((*MockRepository)(nil).TruncateTable), arg0)
}

// UpdateOrder mocks base method.
func (m *MockRepository) UpdateOrder(arg0 context.Context, arg1 *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockRepositoryMockRecorder) UpdateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockRepository)(nil).UpdateOrder), arg0, arg1)
}
